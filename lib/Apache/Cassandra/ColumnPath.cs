/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
using HectorSharp.Utils;
using System.Diagnostics;

namespace Apache.Cassandra
{

	[Serializable]
	public partial class ColumnPath : TBase
	{
		public string ColumnFamily { get; private set; }
		public string SuperColumn { get; private set; }
		public string Column { get; private set; }

		public ColumnPath(string columnFamily)
		{
			if (String.IsNullOrEmpty(columnFamily))
				throw new ArgumentNullException("columnFamily");
			ColumnFamily = columnFamily;
		}

		public ColumnPath(string columnFamily, string superColumn)
			: this(columnFamily, superColumn, null)
		{ }


		public ColumnPath(string columnFamily, string superColumn, string column)
			: this (columnFamily)
		{
			if (!String.IsNullOrEmpty(superColumn))
				SuperColumn = superColumn;
			if (!String.IsNullOrEmpty(column))
				Column = column;
		}

		public ColumnPath()
		{ }

		public void Read(TProtocol iprot)
		{
			TField field;
			iprot.ReadStructBegin();
			while (true)
			{
				field = iprot.ReadFieldBegin();
				if (field.Type == TType.Stop)
					break;
				
				switch (field.ID)
				{
					case 3:
						if (field.Type == TType.String)
							ColumnFamily = iprot.ReadString();
						else
							TProtocolUtil.Skip(iprot, field.Type);
						break;

					case 4:
						if (field.Type == TType.String)
						{
							var value = iprot.ReadBinary();
							if (value.Length > 0)
								SuperColumn = value.DecodeUtf8String();
						}
						else
							TProtocolUtil.Skip(iprot, field.Type);
						break;

					case 5:
						if (field.Type == TType.String)
						{
							var value = iprot.ReadBinary();
							if (value.Length > 0)
								Column = value.DecodeUtf8String();
						}
						else
							TProtocolUtil.Skip(iprot, field.Type);
						break;

					default:
						TProtocolUtil.Skip(iprot, field.Type);
						break;
				}
				iprot.ReadFieldEnd();
			}
			iprot.ReadStructEnd();
		}

		public void Write(TProtocol oprot)
		{
			TStruct struc = new TStruct("ColumnPath");
			oprot.WriteStructBegin(struc);
			TField field = new TField();
			if (!String.IsNullOrEmpty(ColumnFamily)) 
			{
				field.Name = "column_family";
				field.Type = TType.String;
				field.ID = 3;
				oprot.WriteFieldBegin(field);
				oprot.WriteString(ColumnFamily);
				oprot.WriteFieldEnd();
			}
			if (!String.IsNullOrEmpty(SuperColumn)) 
			{
				field.Name = "super_column";
				field.Type = TType.String;
				field.ID = 4;
				oprot.WriteFieldBegin(field);
				oprot.WriteBinary(SuperColumn.UTF());
				oprot.WriteFieldEnd();
			}
			if (!String.IsNullOrEmpty(Column))
			{
				field.Name = "column";
				field.Type = TType.String;
				field.ID = 5;
				oprot.WriteFieldBegin(field);
				oprot.WriteBinary(Column.UTF());
				oprot.WriteFieldEnd();
			}
			oprot.WriteFieldStop();
			oprot.WriteStructEnd();
		}

		public override string ToString()
		{
			return string.Format("ColumnPath(column_family: {0}, super_column: {1}, column: {2})",
				!String.IsNullOrEmpty(ColumnFamily) ? ColumnFamily : "(null)",
				!String.IsNullOrEmpty(SuperColumn) ? SuperColumn : "(null)",
				!String.IsNullOrEmpty(Column) ? Column : "(null)");
		}
	}
}

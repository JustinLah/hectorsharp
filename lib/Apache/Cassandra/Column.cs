/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
using HectorSharp.Utils;

namespace Apache.Cassandra
{
	[Serializable]
	public partial class Column : TBase
	{
		//byte[] name;
		//byte[] value;
		long? timestamp;

		public Column()
		{ }

		public Column(byte[] name, byte[] value, long timestamp)
		{
			if(name != null && name.Length > 0)
				Name = name.DecodeUtf8String();
			if (value != null && value.Length > 0)
				Value = value.DecodeUtf8String();
			if(timestamp > 0)
				this.timestamp = timestamp;
		}

		public Column(string name, string value, long timestamp)
		{
			if(!String.IsNullOrEmpty(name))
				Name = name;
			if (!String.IsNullOrEmpty(value))
				Value = value;
			if (timestamp > 0)
				this.timestamp = timestamp;
		}

		public Column(string name, string value)
			: this(name, value, Util.UnixTimestamp)
		{ }

		public string Name { get; set; }
		public string Value { get; set; }
		public long Timestamp
		{
			get
			{
				if (timestamp.HasValue)
					return timestamp.Value;
				return 0;
			}
		}

		public void Read(TProtocol iprot)
		{
			TField field;
			iprot.ReadStructBegin();
			while (true)
			{
				field = iprot.ReadFieldBegin();
				if (field.Type == TType.Stop)
				{
					break;
				}
				switch (field.ID)
				{
					case 1:
						if (field.Type == TType.String)
						{
							var name = iprot.ReadBinary();
							if (name.Length > 0)
								Name = name.DecodeUtf8String();
							//this.__isset.name = true;
						}
						else
						{
							TProtocolUtil.Skip(iprot, field.Type);
						}
						break;
					case 2:
						if (field.Type == TType.String)
						{
							var value = iprot.ReadBinary();
							if (value.Length > 0) Value = value.DecodeUtf8String();
							//this.__isset.value = true;
						}
						else
						{
							TProtocolUtil.Skip(iprot, field.Type);
						}
						break;
					case 3:
						if (field.Type == TType.I64)
						{
							this.timestamp = iprot.ReadI64();
							//this.__isset.timestamp = true;
						}
						else
						{
							TProtocolUtil.Skip(iprot, field.Type);
						}
						break;
					default:
						TProtocolUtil.Skip(iprot, field.Type);
						break;
				}
				iprot.ReadFieldEnd();
			}
			iprot.ReadStructEnd();
		}

		public void Write(TProtocol oprot)
		{
			TStruct struc = new TStruct("Column");
			oprot.WriteStructBegin(struc);
			TField field = new TField();
			if (!String.IsNullOrEmpty(Name)) // this.name != null && __isset.name)
			{
				field.Name = "name";
				field.Type = TType.String;
				field.ID = 1;
				oprot.WriteFieldBegin(field);
				oprot.WriteBinary(Name.UTF());
				oprot.WriteFieldEnd();
			}
			if (!String.IsNullOrEmpty(Value)) // this.value != null && __isset.value)
			{
				field.Name = "value";
				field.Type = TType.String;
				field.ID = 2;
				oprot.WriteFieldBegin(field);
				oprot.WriteBinary(Value.UTF());
				oprot.WriteFieldEnd();
			}
			if (timestamp.HasValue) //  __isset.timestamp)
			{
				field.Name = "timestamp";
				field.Type = TType.I64;
				field.ID = 3;
				oprot.WriteFieldBegin(field);
				oprot.WriteI64(timestamp.Value);
				oprot.WriteFieldEnd();
			}
			oprot.WriteFieldStop();
			oprot.WriteStructEnd();
		}

		public override string ToString()
		{
			return String.Format("Column(name: {0}, value: {1}, timestamp: {2})",
				!String.IsNullOrEmpty(Name) ? Name : "(null)",
				!String.IsNullOrEmpty(Value) ? Value : "(null)",
				timestamp.HasValue ? timestamp.Value.ToString() : "(null)");
		}

	}

}
